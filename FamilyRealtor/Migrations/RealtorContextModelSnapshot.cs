// <auto-generated />
using System;
using FamilyRealtor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FamilyRealtor.Migrations
{
    [DbContext(typeof(RealtorContext))]
    partial class RealtorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FacilityRental", b =>
                {
                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("RentalsId")
                        .HasColumnType("int");

                    b.HasKey("FacilitiesId", "RentalsId");

                    b.HasIndex("RentalsId");

                    b.ToTable("FacilityRental");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("Guests")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Paid")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RentalId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18)
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RentalId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Квартира"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Комната"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Дом"
                        });
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = "TR",
                            Name = "Стамбул"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = "TR",
                            Name = "Анталья"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = "AE",
                            Name = "Дубай"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = "AE",
                            Name = "Абу-Даби"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = "EG",
                            Name = "Каир"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = "EG",
                            Name = "Хургада"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = "GE",
                            Name = "Тбилиси"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = "GE",
                            Name = "Батуми"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = "TN",
                            Name = "Тунис"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = "TN",
                            Name = "Сусс"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = "MV",
                            Name = "Мале"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = "MV",
                            Name = "Ари-Атолл"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = "TH",
                            Name = "Бангкок"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = "TH",
                            Name = "Паттайя"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = "ID",
                            Name = "Бали"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = "ID",
                            Name = "Яккарта"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = "GR",
                            Name = "Афины"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = "GR",
                            Name = "Салоники"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = "CY",
                            Name = "Никосия"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = "CY",
                            Name = "Лимассол"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = "BG",
                            Name = "София"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = "BG",
                            Name = "Варна"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = "VN",
                            Name = "Ханой"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = "VN",
                            Name = "Хошимин"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = "IT",
                            Name = "Рим"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = "IT",
                            Name = "Милан"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = "ES",
                            Name = "Барселона"
                        },
                        new
                        {
                            Id = 28,
                            CountryId = "ES",
                            Name = "Мадрид"
                        },
                        new
                        {
                            Id = 29,
                            CountryId = "HR",
                            Name = "Дубровник"
                        },
                        new
                        {
                            Id = 30,
                            CountryId = "HR",
                            Name = "Сплит"
                        },
                        new
                        {
                            Id = 31,
                            CountryId = "ME",
                            Name = "Будва"
                        },
                        new
                        {
                            Id = 32,
                            CountryId = "ME",
                            Name = "Котор"
                        },
                        new
                        {
                            Id = 33,
                            CountryId = "MX",
                            Name = "Канкун"
                        },
                        new
                        {
                            Id = 34,
                            CountryId = "MX",
                            Name = "Мексико"
                        },
                        new
                        {
                            Id = 35,
                            CountryId = "CU",
                            Name = "Гавана"
                        },
                        new
                        {
                            Id = 36,
                            CountryId = "CU",
                            Name = "Варадеро"
                        },
                        new
                        {
                            Id = 37,
                            CountryId = "DO",
                            Name = "Пунта-Кана"
                        },
                        new
                        {
                            Id = 38,
                            CountryId = "DO",
                            Name = "Санто-Доминго"
                        },
                        new
                        {
                            Id = 39,
                            CountryId = "TW",
                            Name = "Тайбэй"
                        },
                        new
                        {
                            Id = 40,
                            CountryId = "TW",
                            Name = "Каошиунг"
                        },
                        new
                        {
                            Id = 41,
                            CountryId = "BR",
                            Name = "Рио-де-Жанейро"
                        },
                        new
                        {
                            Id = 42,
                            CountryId = "BR",
                            Name = "Сан-Паулу"
                        },
                        new
                        {
                            Id = 43,
                            CountryId = "US",
                            Name = "Нью-Йорк"
                        },
                        new
                        {
                            Id = 44,
                            CountryId = "US",
                            Name = "Лос-Анджелес"
                        });
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = "TR",
                            Name = "Турция"
                        },
                        new
                        {
                            Id = "AE",
                            Name = "ОАЭ"
                        },
                        new
                        {
                            Id = "EG",
                            Name = "Египет"
                        },
                        new
                        {
                            Id = "GE",
                            Name = "Грузия"
                        },
                        new
                        {
                            Id = "TN",
                            Name = "Тунис"
                        },
                        new
                        {
                            Id = "MV",
                            Name = "Мальдивы"
                        },
                        new
                        {
                            Id = "TH",
                            Name = "Таиланд"
                        },
                        new
                        {
                            Id = "ID",
                            Name = "Индонезия"
                        },
                        new
                        {
                            Id = "GR",
                            Name = "Греция"
                        },
                        new
                        {
                            Id = "CY",
                            Name = "Кипр"
                        },
                        new
                        {
                            Id = "BG",
                            Name = "Болгария"
                        },
                        new
                        {
                            Id = "VN",
                            Name = "Вьетнам"
                        },
                        new
                        {
                            Id = "IT",
                            Name = "Италия"
                        },
                        new
                        {
                            Id = "ES",
                            Name = "Испания"
                        },
                        new
                        {
                            Id = "HR",
                            Name = "Хорватия"
                        },
                        new
                        {
                            Id = "ME",
                            Name = "Черногория"
                        },
                        new
                        {
                            Id = "MX",
                            Name = "Мексика"
                        },
                        new
                        {
                            Id = "CU",
                            Name = "Куба"
                        },
                        new
                        {
                            Id = "DO",
                            Name = "Доминикана"
                        },
                        new
                        {
                            Id = "TW",
                            Name = "Тайвань"
                        },
                        new
                        {
                            Id = "BR",
                            Name = "Бразилия"
                        },
                        new
                        {
                            Id = "US",
                            Name = "США"
                        });
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Facility");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconClass = "fa fa-wifi",
                            Name = "Интернет"
                        },
                        new
                        {
                            Id = 2,
                            IconClass = "fa fa-tv",
                            Name = "Телевизор"
                        },
                        new
                        {
                            Id = 3,
                            IconClass = "fa fa-water",
                            Name = "Вид на море"
                        },
                        new
                        {
                            Id = 4,
                            IconClass = "fa fa-burger",
                            Name = "Питание"
                        },
                        new
                        {
                            Id = 5,
                            IconClass = "fa fa-smoking",
                            Name = "Курение"
                        },
                        new
                        {
                            Id = 6,
                            IconClass = "fa fa-champagne-glasses",
                            Name = "Вечеринки"
                        },
                        new
                        {
                            Id = 7,
                            IconClass = "fa fa-cat",
                            Name = "Питомцы разрешены"
                        });
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentalId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apartment")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("MaximumGuests")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PriceADay")
                        .IsRequired()
                        .HasPrecision(18)
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("TimeModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate() at time zone 'Russian Standard Time'");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Rental");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Rating")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RentalId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("FamilyRealtor.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FacilityRental", b =>
                {
                    b.HasOne("FamilyRealtor.Models.DomainModels.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyRealtor.Models.DomainModels.Rental", null)
                        .WithMany()
                        .HasForeignKey("RentalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Booking", b =>
                {
                    b.HasOne("FamilyRealtor.Models.DomainModels.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId");

                    b.HasOne("FamilyRealtor.Models.DomainModels.Rental", "Rental")
                        .WithMany("Bookings")
                        .HasForeignKey("RentalId");

                    b.Navigation("Client");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.City", b =>
                {
                    b.HasOne("FamilyRealtor.Models.DomainModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Photo", b =>
                {
                    b.HasOne("FamilyRealtor.Models.DomainModels.Rental", "Rental")
                        .WithMany("Photos")
                        .HasForeignKey("RentalId");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Rental", b =>
                {
                    b.HasOne("FamilyRealtor.Models.DomainModels.Category", "Category")
                        .WithMany("Rentals")
                        .HasForeignKey("CategoryId");

                    b.HasOne("FamilyRealtor.Models.DomainModels.City", "City")
                        .WithMany("Rentals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Review", b =>
                {
                    b.HasOne("FamilyRealtor.Models.DomainModels.Client", "Client")
                        .WithMany("Reviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyRealtor.Models.DomainModels.Rental", "Rental")
                        .WithMany("Reviews")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("FamilyRealtor.Models.User", b =>
                {
                    b.HasOne("FamilyRealtor.Models.DomainModels.Client", "Client")
                        .WithOne("User")
                        .HasForeignKey("FamilyRealtor.Models.User", "ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FamilyRealtor.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FamilyRealtor.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyRealtor.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FamilyRealtor.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Category", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.City", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Client", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("FamilyRealtor.Models.DomainModels.Rental", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Photos");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
